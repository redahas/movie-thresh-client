name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]
    # tags:
    #   - 'v*'
    #   - 'v*.*'
    #   - 'v*.*.*'

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable
        env:
          CI: true

      - name: Run linting
        run: yarn lint

      - name: Run unit tests
        run: yarn test:run

      - name: Build application
        run: |
          echo "🔨 Starting build process..."
          echo "📁 Current directory before build:"
          pwd
          echo "📁 Contents before build:"
          ls -la

          echo "🔨 Running Vite build..."
          yarn build

          echo "📁 Contents after build:"
          ls -la
          echo "📁 Checking for TanStack Start output directories:"
          if [ -d ".output" ]; then
            echo "✅ .output directory found!"
            ls -la .output/
            if [ -d ".output/client" ]; then
              echo "✅ .output/client directory found!"
              ls -la .output/client/
            fi
          else
            echo "❌ .output directory not found!"
            echo "📁 Checking for other build directories:"
            find . -name "*.js" -o -name "*.css" -o -name "*.html" | head -10
          fi
        env:
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
          VITE_ENVIRONMENT: production
          VITE_SENTRY_TRACES_SAMPLE_RATE: '0.1'
          VITE_SENTRY_TRACE_PROPAGATION_TARGETS: 'movie-thresh-client.vercel.app,movie-thresh-server.vercel.app'

      # - name: Upload sourcemaps to Sentry
      #   # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: |
      #     echo "📁 Current directory before Sentry upload:"
      #     pwd
      #     echo "📁 Contents of current directory:"
      #     ls -la
      #     echo "📁 Contents of .output directory (if it exists):"
      #     ls -la .output/ || echo ".output directory not found"
      #     echo "📁 Searching for any build files:"
      #     find . -name "*.js" -o -name "*.css" -o -name "*.html" | head -10
      #     echo "📁 Running Sentry upload..."
      #     yarn upload-sourcemaps
      #   env:
      #     SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      #     SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      #     SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      #     SENTRY_RELEASE: ${{ github.sha }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .output/
          retention-days: 30

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .output/

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          echo "Build artifacts downloaded to .output/"

          # Deploy to Vercel (commented out until ready)
          # npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --yes

          # Placeholder for actual deployment
          # Uncomment and configure one of these:
          # - name: Deploy to Vercel
          #   run: npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}

          # - name: Deploy to Netlify
          #   run: npx netlify deploy --prod --dir=dist --auth ${{ secrets.NETLIFY_AUTH_TOKEN }}

          # - name: Deploy to AWS S3
          #   run: |
          #     aws s3 sync dist/ s3://${{ secrets.AWS_S3_BUCKET }} --delete
          #     aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

{"version":3,"file":"signup-DnFCCOFQ.js","sources":["../../../../../src/routes/signup.tsx?tsr-split=component"],"sourcesContent":["import { redirect, createFileRoute } from '@tanstack/react-router'\nimport { createServerFn, useServerFn } from '@tanstack/react-start'\nimport { useMutation } from '../hooks/useMutation'\nimport { Auth } from '../components/Auth'\nimport { getSupabaseServerClient } from '../utils/supabase'\n\nexport const signupFn = createServerFn({ method: 'POST' })\n  .validator(\n    (d: { email: string; password: string; redirectUrl?: string }) => d,\n  )\n  .handler(async ({ data }) => {\n    const supabase = getSupabaseServerClient()\n    const { error } = await supabase.auth.signUp({\n      email: data.email,\n      password: data.password,\n    })\n    if (error) {\n      return {\n        error: true,\n        message: error.message,\n      }\n    }\n\n    // Redirect to the prev page stored in the \"redirect\" search param\n    throw redirect({\n      href: data.redirectUrl || '/',\n    })\n  })\n\nexport const Route = createFileRoute('/signup')({\n  component: SignupComp,\n})\n\nfunction SignupComp() {\n  const signupMutation = useMutation({\n    fn: useServerFn(signupFn),\n  })\n\n  return (\n    <Auth\n      actionText=\"Sign Up\"\n      status={signupMutation.status}\n      onSubmit={(e) => {\n        const formData = new FormData(e.target as HTMLFormElement)\n\n        signupMutation.mutate({\n          data: {\n            email: formData.get('email') as string,\n            password: formData.get('password') as string,\n          },\n        })\n      }}\n      afterSubmit={\n        signupMutation.data?.error ? (\n          <>\n            <div className=\"text-red-400\">{signupMutation.data.message}</div>\n          </>\n        ) : null\n      }\n    />\n  )\n}\n"],"names":["SplitComponent","signupMutation","useMutation","fn","useServerFn","signupFn","jsx","Auth","status","e","formData","FormData","target","mutate","data","email","get","password","error","Fragment","message"],"mappings":"4aAGyC,MAAAA,EAAA,UA8BnB,OACpB,MAAMC,EAAiBC,EAAY,CACjCC,GAAIC,EAAYC,CAAQ,CAAA,CACzB,EAED,OACEC,MAACC,GACC,WAAW,UACX,OAAQN,EAAeO,OACvB,SAAWC,GAAM,CACf,MAAMC,EAAW,IAAIC,SAASF,EAAEG,MAAyB,EAEzDX,EAAeY,OAAO,CACpBC,KAAM,CACJC,MAAOL,EAASM,IAAI,OAAO,EAC3BC,SAAUP,EAASM,IAAI,UAAU,CAAA,CACnC,CACD,CAAA,EAEH,aACEf,EAAAA,EAAea,OAAfb,MAAAA,EAAqBiB,MACnBZ,EAAAA,IAAAa,EAAAA,SAAA,CACE,SAAAb,MAAC,MAAA,CAAI,UAAU,eAAgBL,SAAAA,EAAea,KAAKM,QAAQ,CAAA,CAC7D,EACE,KACL,CAGP"}
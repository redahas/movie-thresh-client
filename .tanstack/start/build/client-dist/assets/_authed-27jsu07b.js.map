{"version":3,"file":"_authed-27jsu07b.js","sources":["../../../../../src/routes/_authed.tsx?tsr-split=errorComponent"],"sourcesContent":["import { createFileRoute } from '@tanstack/react-router'\nimport { createServerFn } from '@tanstack/react-start'\nimport { Login } from '../components/Login'\nimport { getSupabaseServerClient } from '../utils/supabase'\n\nexport const loginFn = createServerFn({ method: 'POST' })\n  .validator((d: { email: string; password: string }) => d)\n  .handler(async ({ data }) => {\n    const supabase = getSupabaseServerClient()\n    const { error } = await supabase.auth.signInWithPassword({\n      email: data.email,\n      password: data.password,\n    })\n\n    if (error) {\n      return {\n        error: true,\n        message: error.message,\n      }\n    }\n  })\n\nexport const googleAuthFn = createServerFn({ method: 'POST' }).handler(\n  async ({ data }: { data: { access_token: string } }) => {\n    const supabase = getSupabaseServerClient()\n\n    const { data: authData, error } = await supabase.auth.signInWithIdToken({\n      provider: 'google',\n      token: data.access_token,\n    })\n\n    if (error) {\n      return {\n        error: true,\n        message: error.message,\n      }\n    }\n\n    return {\n      error: false,\n      user: authData.user,\n    }\n  },\n)\n\nexport const Route = createFileRoute('/_authed')({\n  beforeLoad: ({ context }) => {\n    if (!context.user) {\n      throw new Error('Not authenticated')\n    }\n  },\n  errorComponent: ({ error }) => {\n    if (error.message === 'Not authenticated') {\n      return <Login />\n    }\n\n    throw error\n  },\n})\n"],"names":["SplitErrorComponent","error","message","Login"],"mappings":"mbAE2C,MAAAA,EAiDzBA,CAAC,CAAEC,MAAAA,CAAM,IAAM,CAC7B,GAAIA,EAAMC,UAAY,oBACpB,aAAQC,EAAA,EAAK,EAGf,MAAMF,CACR"}
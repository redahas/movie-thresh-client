{"version":3,"file":"Login-QpR84cK_.js","sources":["../../../../../src/utils/google-auth.ts","../../../../../src/components/Login.tsx"],"sourcesContent":["// Google Auth configuration and utilities\nexport const GOOGLE_CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID;\n\n// Google Sign-In configuration\nexport const createGoogleSignInConfig = (googleAuthMutation: any, onSuccess?: (user: any) => void, onError?: (error: string) => void) => ({\n  client_id: GOOGLE_CLIENT_ID,\n  callback: async (response: any) => {\n    console.log('Google Sign-In response:', response)\n    \n    // Use the mutation to call the server function\n    googleAuthMutation.mutate({\n      data: {\n        access_token: response.credential,\n      },\n    })\n  },\n  auto_select: false,\n  cancel_on_tap_outside: true,\n})\n\n// Initialize Google Sign-In\nexport const initializeGoogleSignIn = (googleAuthMutation: any, onSuccess?: (user: any) => void, onError?: (error: string) => void) => {\n  if (typeof window !== 'undefined' && window.google?.accounts?.id) {\n    const config = createGoogleSignInConfig(googleAuthMutation, onSuccess, onError)\n    window.google.accounts.id.initialize(config)\n  }\n}\n\n// Render Google Sign-In button\nexport const renderGoogleSignInButton = (elementId: string) => {\n  if (typeof window !== 'undefined' && window.google?.accounts?.id) {\n    window.google.accounts.id.renderButton(\n      document.getElementById(elementId),\n      {\n        theme: 'outline',\n        size: 'large',\n        type: 'standard',\n        text: 'signin_with',\n        shape: 'rectangular',\n        logo_alignment: 'left',\n      }\n    )\n  }\n}\n\n// Prompt for Google Sign-In\nexport const promptGoogleSignIn = () => {\n  if (typeof window !== 'undefined' && window.google?.accounts?.id) {\n    window.google.accounts.id.prompt()\n  }\n}\n\n// Sign out from Google\nexport const signOutGoogle = () => {\n  if (typeof window !== 'undefined' && window.google?.accounts?.id) {\n    window.google.accounts.id.disableAutoSelect()\n  }\n}\n\n// Type definitions for Google Identity Services\ndeclare global {\n  interface Window {\n    google?: {\n      accounts?: {\n        id?: {\n          initialize: (config: any) => void\n          renderButton: (element: HTMLElement | null, options: any) => void\n          prompt: () => void\n          disableAutoSelect: () => void\n        }\n      }\n    }\n  }\n} ","import { useRouter } from '@tanstack/react-router'\nimport { useServerFn } from '@tanstack/react-start'\nimport { useEffect, useState } from 'react'\nimport { useMutation } from '../hooks/useMutation'\nimport { loginFn, googleAuthFn } from '../routes/_authed'\nimport { signupFn } from '../routes/signup'\nimport { Auth } from './Auth'\nimport { initializeGoogleSignIn, renderGoogleSignInButton } from '../utils/google-auth'\n\nexport function Login() {\n  const router = useRouter()\n  const [googleError, setGoogleError] = useState<string | null>(null)\n\n  const loginMutation = useMutation({\n    fn: loginFn,\n    onSuccess: async (ctx) => {\n      if (!ctx.data?.error) {\n        await router.invalidate()\n        router.navigate({ to: '/' })\n        return\n      }\n    },\n  })\n\n  const googleAuthMutation = useMutation({\n    fn: googleAuthFn,\n    onSuccess: async (ctx) => {\n      debugger;\n      if (!ctx.data?.error) {\n        await router.invalidate()\n        router.navigate({ to: '/' })\n        return\n      } else {\n        setGoogleError(ctx.data.message || 'Authentication failed')\n      }\n    },\n  })\n\n  const signupMutation = useMutation({\n    fn: useServerFn(signupFn),\n  })\n\n  // Initialize Google Sign-In when component mounts\n  useEffect(() => {\n    // Wait for Google script to load\n    const checkGoogleLoaded = () => {\n      if (typeof window !== 'undefined' && window.google?.accounts?.id) {\n        initializeGoogleSignIn(\n          googleAuthMutation,\n          (user) => {\n            console.log('Google Sign-In successful:', user)\n          },\n          (error) => {\n            console.error('Google Sign-In error:', error)\n            setGoogleError(error)\n          }\n        )\n        renderGoogleSignInButton('google-signin-button')\n      } else {\n        // Retry after a short delay\n        setTimeout(checkGoogleLoaded, 100)\n      }\n    }\n    \n    checkGoogleLoaded()\n  }, [googleAuthMutation])\n\n  return (\n    <div className=\"space-y-6\">\n      <Auth\n        actionText=\"Login\"\n        status={loginMutation.status}\n        onSubmit={(e) => {\n          const formData = new FormData(e.target as HTMLFormElement)\n\n          loginMutation.mutate({\n            data: {\n              email: formData.get('email') as string,\n              password: formData.get('password') as string,\n            },\n          })\n        }}\n        afterSubmit={\n          loginMutation.data ? (\n            <>\n              <div className=\"text-red-400\">{loginMutation.data.message}</div>\n              {loginMutation.data.error &&\n              loginMutation.data.message === 'Invalid login credentials' ? (\n                <div>\n                  <button\n                    className=\"text-blue-500\"\n                    onClick={(e) => {\n                      const formData = new FormData(\n                        (e.target as HTMLButtonElement).form!,\n                      )\n\n                      signupMutation.mutate({\n                        data: {\n                          email: formData.get('email') as string,\n                          password: formData.get('password') as string,\n                        },\n                      })\n                    }}\n                    type=\"button\"\n                  >\n                    Sign up instead?\n                  </button>\n                </div>\n              ) : null}\n            </>\n          ) : null\n        }\n      />\n      \n      {/* Google Sign-In Section */}\n      <div className=\"flex items-center\">\n        <div className=\"flex-1 border-t border-gray-300\"></div>\n        <span className=\"px-3 text-gray-500 text-sm\">or</span>\n        <div className=\"flex-1 border-t border-gray-300\"></div>\n      </div>\n      \n      <div className=\"flex flex-col items-center space-y-4\">\n        <div id=\"google-signin-button\"></div>\n        {googleError && (\n          <div className=\"text-red-400 text-sm\">{googleError}</div>\n        )}\n        {googleAuthMutation.status === 'pending' && (\n          <div className=\"text-blue-400 text-sm\">Signing in...</div>\n        )}\n      </div>\n    </div>\n  )\n}\n"],"names":["GOOGLE_CLIENT_ID","createGoogleSignInConfig","googleAuthMutation","onSuccess","onError","response","initializeGoogleSignIn","_b","_a","config","renderGoogleSignInButton","elementId","Login","router","useRouter","googleError","setGoogleError","useState","loginMutation","useMutation","loginFn","ctx","googleAuthFn","signupMutation","useServerFn","signupFn","useEffect","checkGoogleLoaded","jsxs","jsx","Auth","e","formData","Fragment"],"mappings":"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"}